/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.dfi.valuestreeview;

import java.awt.BorderLayout;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//cz.dfi.valuestreeview//TreeView//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TreeViewTopComponent",
        iconBase = "cz/dfi/valuestreeview/iconmonstr-menu-6-16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "cz.dfi.valuestreeview.TreeViewTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TreeViewAction",
        preferredID = "TreeViewTopComponent"
)
@Messages({
    "CTL_TreeViewAction=TreeView",
    "CTL_TreeViewTopComponent=TreeView Window",
    "HINT_TreeViewTopComponent=This is a TreeView window"
})
public final class TreeViewTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static final long serialVersionUID = 1L;
    private final ExplorerManager mgr = new ExplorerManager();

    public TreeViewTopComponent() {
        initComponents();
        setName(Bundle.CTL_TreeViewTopComponent());
        setToolTipText(Bundle.HINT_TreeViewTopComponent());
        beanTreeView = new BeanTreeView();
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
        mgr.setRootContext(new RootNode(beanTreeView));
        add(beanTreeView, BorderLayout.CENTER);
        beanTreeView.setRootVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private final BeanTreeView beanTreeView;

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    private static class RootNode extends AbstractNode {

        public RootNode(BeanTreeView beanTreeView) {
            super(Children.create(new TopLevelValueNodesFactory(beanTreeView), false));
        }
    }
}
