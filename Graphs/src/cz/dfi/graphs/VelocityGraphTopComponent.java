/*
 */
package cz.dfi.graphs;

import cz.dfi.datamodel.common.VelocityWrapper;
import cz.dfi.datamodel.series.SeriesGroupWrapper;
import cz.dfi.recorddataprovider.FileLookup;
import java.awt.BorderLayout;
import java.util.Collection;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays graphs of velocity in x, y and z.
  * <p>
 * Contains jFreeChart panel.
 * <p>
 * Tracks the {@link VelocityWrapper} in the {@link FileLookup} and uses the 
 * {@link MultipleValuesDataset"} to plot the values.
 */
@TopComponent.Description(
        preferredID = "VelocityGraphTopComponent",
        iconBase = "cz/dfi/graphs/iconmonstr-crosshair-icon-16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "cz.dfi.graphs.VelocityGraphTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_VelocityGraphAction",
        preferredID = "VelocityGraphTopComponent"
)
@Messages({
    "CTL_VelocityGraphAction=VelocityGraph",
    "CTL_VelocityGraphTopComponent=VelocityGraph Window",
    "HINT_VelocityGraphTopComponent=This is a VelocityGraph window"
})
public final class VelocityGraphTopComponent extends TopComponent implements LookupListener {

    private static final long serialVersionUID = 1L;
    private final MultipleValuesDataset dataSet;
    private final JFreeChart chart;
    private final Lookup.Result<VelocityWrapper> velocityResult;

    public VelocityGraphTopComponent() {
        initComponents();
        setName(Bundle.CTL_VelocityGraphTopComponent());
        setToolTipText(Bundle.HINT_VelocityGraphTopComponent());
        dataSet = new MultipleValuesDataset();
        chart = ChartFactory.createTimeSeriesChart(null, "Time [sec]", "Velocity", dataSet, true, true, false);
        ChartPanel cp = new ChartPanel(chart);
        jPanel1.setLayout(new BorderLayout());
        GraphsCommon.setupChart(chart);
        jPanel1.add(cp);
        velocityResult = FileLookup.getDefault().lookupResult(VelocityWrapper.class);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
        @Override
    public void componentOpened() {
        velocityResult.addLookupListener(this);
        resultChanged(null);
    }

    @Override
    public void componentClosed() {
        velocityResult.removeLookupListener(this);
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Collection<? extends VelocityWrapper> res = velocityResult.allInstances();
        if (res.isEmpty()) {
            dataSet.clear();
        } else {
            SeriesGroupWrapper w = res.iterator().next();
            GraphsCommon.putChildrenToDataset(w, dataSet);
        }
    }
}
