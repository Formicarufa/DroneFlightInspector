/*
 */
package cz.dfi.graphs;

import cz.dfi.datamodel.FlightDataRecord;
import cz.dfi.recorddataprovider.caching.CachedDataProvider;
import cz.dfi.recorddataprovider.caching.CachedDataReceiver;
import java.awt.BorderLayout;
import java.util.List;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.DefaultXYDataset;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//cz.dfi.graphs//MotorsGraph//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "MotorsGraphTopComponent",
        iconBase = "cz/dfi/graphs/iconmonstr-gear-icon-16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "cz.dfi.graphs.MotorsGraphTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MotorsGraphAction",
        preferredID = "MotorsGraphTopComponent"
)
@Messages({
    "CTL_MotorsGraphAction=MotorsGraph",
    "CTL_MotorsGraphTopComponent=MotorsGraph Window",
    "HINT_MotorsGraphTopComponent=This is a MotorsGraph window"
})
public final class MotorsGraphTopComponent extends TopComponent implements CachedDataReceiver<double[][][]> {

    private final DefaultXYDataset dataSet;
    private final JFreeChart chart;
    private double[][][] graphValues;

    public MotorsGraphTopComponent() {
        initComponents();
        setName(Bundle.CTL_MotorsGraphTopComponent());
        setToolTipText(Bundle.HINT_MotorsGraphTopComponent());
        dataSet = new DefaultXYDataset();
        chart = ChartFactory.createXYLineChart(null,
                "Time [sec]", "Motor power [percent]", dataSet, PlotOrientation.VERTICAL, true, true,
                false);
        ChartPanel cp = new ChartPanel(chart);
        jPanel1.setLayout(new BorderLayout());
        jPanel1.add(cp);
        chart.getXYPlot().setDomainPannable(true);
        chart.getXYPlot().setRangePannable(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        cachedData = CachedDataProvider.create(this);
    }
    private CachedDataProvider<double[][][]> cachedData;

    @Override
    public void componentClosed() {
        cachedData.deleteData();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public double[][][] getDataForStoring(Lookup currentContext) {
        List<FlightDataRecord> flightRecords = GraphsCommon.getFlightRecords(currentContext);
        graphValues = new double[4][2][];
        double[] times = new double[flightRecords.size()];
        graphValues[0][0] = times;
        graphValues[1][0] = times;
        graphValues[2][0] = times;
        graphValues[3][0] = times;
        graphValues[0][1] = new double[flightRecords.size()];
        graphValues[1][1] = new double[flightRecords.size()];
        graphValues[2][1] = new double[flightRecords.size()];
        graphValues[3][1] = new double[flightRecords.size()];

        for (int i = 0; i < flightRecords.size(); i++) {
            FlightDataRecord r = flightRecords.get(i);
            times[i] = r.droneTime / 1_000_000;
            graphValues[0][1][i] = r.motor1 * 100 / 255.0;
            graphValues[1][1][i] = r.motor2 * 100 / 255.0;
            graphValues[2][1][i] = r.motor3 * 100 / 255.0;
            graphValues[3][1][i] = r.motor4 * 100 / 255.0;
        }
        return graphValues;
    }

    @Override
    public void setCurrentData(double[][][] data) {
        graphValues = data;
        dataSet.removeSeries("motor1");
        dataSet.removeSeries("motor2");
        dataSet.removeSeries("motor3");
        dataSet.removeSeries("motor4");
        if (data != null) {
            dataSet.addSeries("motor1", data[0]);
            dataSet.addSeries("motor2", data[1]);
            dataSet.addSeries("motor3", data[2]);
            dataSet.addSeries("motor4", data[3]);
        }

    }
}
