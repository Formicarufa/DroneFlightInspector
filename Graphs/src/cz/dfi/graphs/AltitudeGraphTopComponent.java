/*
 */
package cz.dfi.graphs;

import cz.dfi.datamodel.common.AltitudeWrapper;
import cz.dfi.recorddataprovider.FileLookup;
import java.awt.BorderLayout;
import java.util.Collection;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays plot of altitude.
 * <p>
 * Contains jFreeChart panel.
 * <p>
 * Tracks the {@link AltitudeWrapper} in the {@link FileLookup} and uses the 
 * {@link SimpleTimeDataset"} to plot the values.
 */
@TopComponent.Description(
        preferredID = "AltitudeGraphTopComponent",
        iconBase = "cz/dfi/graphs/height.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "cz.dfi.graphs.AltitudeGraphTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_AltitudeGraphAction",
        preferredID = "AltitudeGraphTopComponent"
)
@Messages({
    "CTL_AltitudeGraphAction=AltitudeGraph",
    "CTL_AltitudeGraphTopComponent=Altitude Graph Window",
    "HINT_AltitudeGraphTopComponent=A plot of altitude in time"
})
public final class AltitudeGraphTopComponent extends TopComponent implements LookupListener {

    private static final long serialVersionUID = 1L;

    protected final JFreeChart chart;
    protected final SimpleTimeDataset dataSet;
    private final Lookup.Result<AltitudeWrapper> altitudeResult;

    public AltitudeGraphTopComponent() {
        initComponents();
        dataSet = new SimpleTimeDataset();
        chart = ChartFactory.createTimeSeriesChart(null, "Time [sec]", "Altitude [cm]", dataSet, false, true, false);
        ChartPanel cp = new ChartPanel(chart);
        GraphsCommon.setupChart(chart);
        jPanel1.setLayout(new BorderLayout());
        jPanel1.add(cp);
        altitudeResult = FileLookup.getDefault().lookupResult(AltitudeWrapper.class);

    }

    @Override
    public void componentOpened() {
        setName(Bundle.CTL_AltitudeGraphTopComponent());
        setToolTipText(Bundle.HINT_AltitudeGraphTopComponent());
        altitudeResult.addLookupListener(this);
        resultChanged(null);
    }

    @Override
    public void componentClosed() {
        altitudeResult.removeLookupListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void resultChanged(LookupEvent ev) {
        Collection<? extends AltitudeWrapper> alt = altitudeResult.allInstances();
        if (alt.isEmpty()) {
            dataSet.resultChanged(new long[0], new double[0]);
        } else {
            AltitudeWrapper a = alt.iterator().next();
            dataSet.resultChanged(a.getTimeStamps().getOnboardValues(), a.getValuesAsDoubles());
        }
    }
}
